What happens when you initialize a repository? Why do you need to do it?

We initialize a git repository when we want to start tracking changes using Git. From then on we 
start making commits. We need to do it in order to create the '.git' directory, enabling us to 
start committing.

How is the staging area different from the working directory and the repository? What value do you 
think it offers?

The staging area is just a temporary thing. It is useful because it allows us to review what 
exactly will be committed, before we actually commit.

How can you use the staging area to make sure you have one commit per logical change?

By running git diff on its own, you can check what changes have been made on the working directory 
in comparison to the last commit. Also before finally committing you can make sure one last time 
that you are committing the right changes.

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

Sometimes you want to try something out, perhaps a design choice, and would like to keep that 
seperate from your main project. Another case is if you are making two versions. By using branches 
you can be continue working on concurrent versions without having to worry about affecting each other.

How do the diagrams help you visualize the branch structure?

It may be that for a given project there can be several branches being used, which can be confusing to 
visualise in one's head. By drawing the diagrams we can easily trace back commits through their 
respective parents.

What is the result of merging two branches together? Why do we represent it in the diagram the way we 
do?

Any lines that have been added in either branch since the branches were created gets added to the 
merged file(s). Any lines that were removed in either of the branches will no be included in the 
merged commit. We represent it in the digram as having parents from each branch, and indicated which branch 
has been merged into.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging obviously saves time. In these cases its logically obvious which changes need to be 
retained or removed. Manually merging gives you that extra degree of control that is particularly 
useful in conflicts, which require a human eye.

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not 
part of the repository    

git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within 
different branches

git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead 
of git branch new_branch_name and git checkout new_branch_name

git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working 
even after merging.
