What happens when you initialize a repository? Why do you need to do it?

We initialize a git repository when we want to start tracking changes using Git. From then on we 
start making commits. We need to do it in order to create the '.git' directory, enabling us to 
start committing.

How is the staging area different from the working directory and the repository? What value do you 
think it offers?

The staging area is just a temporary thing. It is useful because it allows us to review what 
exactly will be committed, before we actually commit.

How can you use the staging area to make sure you have one commit per logical change?

By running git diff on its own, you can check what changes have been made on the working directory 
in comparison to the last commit. Also before finally committing you can make sure one last time 
that you are committing the right changes.

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

Sometimes you want to try something out, perhaps a design choice, and would like to keep that 
seperate from your main project. Another case is if you are making two versions. By using branches 
you can be continue working on concurrent versions without having to worry about affecting each other.

How do the diagrams help you visualize the branch structure?

It may be that for a given project there can be several branches being used, which can be confusing to 
visualise in one's head. By drawing the diagrams we can easily trace back commits through their 
respective parents.